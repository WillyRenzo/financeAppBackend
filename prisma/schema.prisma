// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String          @id(map: "pk_users_id") @default(uuid()) @db.Uuid
  name                       String          @map("vc_name") @db.VarChar
  lastName                   String          @map("vc_last_name") @db.VarChar
  password                   String          @map("vc_password") @db.VarChar
  avatar                     String          @map("vc_avatar") @db.VarChar
  phone                      String?         @map("vc_phone") @db.VarChar
  email                      String          @map("vc_email") @db.VarChar
  createdAt                  DateTime        @default(now()) @map("dt_create") @db.Timestamp(6)
  creationUser               String?         @map("create_user_id") @db.Uuid
  updatedAt                  DateTime        @updatedAt @map("dt_update") @db.Timestamp(6)
  updateUser                 String?         @map("update_user_id") @db.Uuid
  inactivatedAt              DateTime?       @map("dt_inactivated") @db.Timestamp(6)
  account                    Account[]       @relation("accountsToUsers_userId")
  category_update_user       Category[]      @relation("categories_update_user_idTousers")
  category_create_user       Category[]      @relation("categories_create_user_idTousers")
  category_items_create_user CategoryItems[] @relation("category_items_create_user_idTousers")
  category_items_update_user CategoryItems[] @relation("category_items_update_user_idTousers")

  @@map("users")
}

model Account {
  id      String @id(map: "pk_accounts_id") @default(uuid()) @db.Uuid
  balance String @map("vc_balance") @db.VarChar

  createdAt    DateTime @default(now()) @map("dt_create") @db.Timestamp(6)
  creationUser String?  @map("create_user_id") @db.Uuid
  updatedAt    DateTime @updatedAt @map("dt_update") @db.Timestamp(6)
  updateUser   String?  @map("update_user_id") @db.Uuid

  userId String @map("user_id") @db.Uuid
  user   User   @relation("accountsToUsers_userId", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_accounts_user_id")

  expenses Expense[] @relation("expensesToAccounts_accountId")

  @@map("accounts")
}

model Expense {
  id          String @id(map: "pk_expenses_id") @default(uuid()) @db.Uuid
  description String @map("vc_description") @db.VarChar
  value       String @map("vc_value") @db.VarChar

  typeId String?       @map("vc_type") @db.Uuid
  type   CategoryItems? @relation("expensesToCategoryItems_typeId", fields: [typeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_expenses_type_id")

  createdAt    DateTime @default(now()) @map("dt_create") @db.Timestamp(6)
  creationUser String?  @map("create_user_id") @db.Uuid

  accountId String  @map("account_id") @db.Uuid
  account   Account @relation("expensesToAccounts_accountId", fields: [accountId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_expenses_account_id")

  isRevenue Boolean @map("bl_is_revenue") @db.Boolean
  isExpense Boolean @map("bl_is_expense") @db.Boolean

  @@map("expenses")
}

model Category {
  id                                     String          @id(map: "pk_categories") @default(uuid()) @db.Uuid
  name                                   String          @map("vc_name") @db.VarChar
  type                                   String          @unique @map("vc_type") @db.VarChar
  value                                  String?         @map("vc_value") @db.VarChar
  createdAt                              DateTime        @default(now()) @map("dt_create") @db.Timestamp(6)
  creationUser                           String          @map("create_user_id") @db.Uuid
  updatedAt                              DateTime        @updatedAt @map("dt_update") @db.Timestamp(6)
  updateUser                             String          @map("update_user_id") @db.Uuid
  inactivatedAt                          DateTime?       @map("dt_inactivated") @db.Timestamp(6)
  users_categories_update_user_idTousers User            @relation("categories_update_user_idTousers", fields: [updateUser], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_categories_update_user")
  users_categories_create_user_idTousers User            @relation("categories_create_user_idTousers", fields: [creationUser], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_categories_create_user")
  category_items                         CategoryItems[]

  @@map("categories")
}

model CategoryItems {
  id                                   String    @id(map: "pk_category_items") @default(uuid()) @db.Uuid
  name                                 String    @map("vc_name") @db.VarChar
  type                                 String    @unique @map("vc_type") @db.VarChar
  value                                String?   @map("vc_value") @db.VarChar
  categoryId                           String    @map("category_id") @db.Uuid
  createdAt                            DateTime  @default(now()) @map("dt_create") @db.Timestamp(6)
  creationUser                         String    @map("create_user_id") @db.Uuid
  updatedAt                            DateTime  @updatedAt @map("dt_update") @db.Timestamp(6)
  updateUser                           String    @map("update_user_id") @db.Uuid
  inactivatedAt                        DateTime? @map("dt_inactivated") @db.Timestamp(6)
  categories                           Category  @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_category_items_category")
  category_items_create_user_idTousers User      @relation("category_items_create_user_idTousers", fields: [creationUser], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_category_items_create_user")
  category_items_update_user_idTousers User      @relation("category_items_update_user_idTousers", fields: [updateUser], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_category_items_update_user")
  expenses                             Expense[] @relation("expensesToCategoryItems_typeId")

  @@map("category_items")
}
